from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.popup import Popup
from datetime import datetime

class Agenda(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', **kwargs)

        #Input para data e descrição//
        self.inputs = BoxLayout(size_hint=(1, 0.2))
        self.data_input = TextInput(hint_text="Data (dd/mm/yyyy HH:MM)")
        self.descricao_input = TextInput(hint_text="Descrição do evento")
        self.add_button = Button(text="Adicionar", size_hint=(0.4, 1))
        self.add_button.bind(on_press=self.add_evento)
        self.inputs.add_widget(self.data_input)
        self.inputs.add_widget(self.descricao_input)
        self.inputs.add_widget(self.add_button)
        self.add_widget(self.inputs)

        # Área para lista de eventos
        self.eventos_area = BoxLayout(orientation='vertical', spacing=5)
        self.add_widget(self.eventos_area)

        self.eventos = []

    def add_evento(self, instance):
        try:
            data = datetime.strptime(self.data_input.text, "%d/%m/%Y %H:%M")
            descricao = self.descricao_input.text.strip()
            if descricao:
                self.eventos.append((data, descricao))
                self.eventos.sort(key=lambda x: x[0])  # Ordena por data
                self.data_input.text = ""
                self.descricao_input.text = ""
                self.update_eventos()
            else:
                self.show_popup("Erro", "Descrição não pode estar vazia.")
        except ValueError:
            self.show_popup("Erro", "Formato de data inválido. Use dd/mm/yyyy HH:MM.")

    def update_eventos(self):
        self.eventos_area.clear_widgets()
        for data, descricao in self.eventos:
            evento = BoxLayout(size_hint_y=None, height=40)
            evento.add_widget(Label(text=f"{data.strftime('%d/%m/%Y %H:%M')} - {descricao}"))
            excluir = Button(text="Excluir", size_hint_x=0.2)
            excluir.bind(on_press=lambda instance, ev=(data, descricao): self.remove_evento(ev))
            evento.add_widget(excluir)
            self.eventos_area.add_widget(evento)

    def remove_evento(self, evento):
        self.eventos.remove(evento)
        self.update_eventos()

    def show_popup(self, title, message):
        popup = Popup(title=title, content=Label(text=message), size_hint=(0.7, 0.4))
        popup.open()

class AgendaApp(App):
    def build(self):
        return Agenda()

if __name__ == "__main__":
    AgendaApp().run()
